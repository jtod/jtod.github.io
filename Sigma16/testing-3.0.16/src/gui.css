/* CSS style for Sigma16 GUI */

/* Define symbolic names for colors and dimensions */

:root {
/* Color definitions */
    --light-blue: #e6ffff;
    --dark-blue: blue;
    --dark-green: green;
    --window-background-color: blue;
    --button-box-background-color: var(--light-blue);
    --bottom-section-background-color: var(--light-blue);
    --wrapper-background-color: var(--dark-green);
/* Size definitions */
    --thin-separation: 0.15em;
    --main-section-top-skip: 2.1em;
    --mem-display-width: 7em;
    --reg-name-val-sep: 0.7em;
}

.RegisterName {
    font-family: 'Lucida Console',monospace;
    font-size: 0.9em;
    font-weight: bold;
}

.RegisterValue {
    font-family: 'Lucida Console',monospace;
    font-size: 0.9em;
}

.FullFrame {
    position: fixed;
    background-color: blue;
    top: 0em;
    bottom: 0em;
    left: 0em;
    right: 0em;
}

/* The top section contains the tab buttons and global controls */
.TopSection {
    position: absolute;
    top: 1em;
    left: 1em; 
    right: 1em;
    height: 1.5em;
    background-color: orange;
}

/* The middle section is the main part of the gui */
.MiddleSection {
    position: absolute;
    top: 4em;
    bottom: 4em;
    left: 1em; 
    right: 1em;
    background-color: green;
}

/* The middle/main section is split into the system display and documentation */

.MidMainSection {
    background-color: red;
    display: flex;
    flex-direction: row;
    position: relative;
    bottom: 1em;
}

/* The left part of middle/main holds the various panes */

.MidMainLeft {
    flex: 1 1 auto;
    background-color: brown;
    box-sizing: border-box;
}

/* There are separate panes for the editor, assembler, etc. Normally
   one is visible and the others are hidden */

.Pane {
    display: absolute;
    background-color: purple;
    top: 0em;
    bottom: 0em;
    left: 0em;
    right: 0em;
/*    width: 100%; */
    margin: 0em;
}

.PaneButtons {
    background-color: beige;
    height: 2em;
    margin: 1em;
}

#WelcomePane {
    height: calc(100vh - 10em);
    left: 0em;
    right: 0em;
    background: ivory;
}

#EditorTextArea {
    background-color: white;
    height: calc(100vh - 12em - 3em);
    margin-left: 1em;
    margin-right: 1em;
}

#AssemblerText {
    height: calc(100vh - 12em);
    margin: 1em;
    background-color: white;
}

#LinkerText {
    height: calc(100vh - 25em);
    margin: 1em;
    background-color: white;
}

#ProcessorAssemblerText {
    height: calc(100vh - 35em);
    margin: 1em;
    background-color: white;
}

#AsmTextHtml, #LinkerTextHtml, #ProcTextHtml {
    height: 100%;
    width: 100%;
    overflow: auto;
}

#HighlightedTextAsHtml {
    margin-left: 1em;
    margin-right: 1em;
}

.MidMainSeparator {
    flex: 0 0 1em;
    background-color: yellow;
}

.MiddleSectionResizeHandle {
  width: 10px;
  padding: 0;
  background: black;
  cursor: ew-resize;
  flex: 0 0 auto;
}

.MiddleSectionResizeHandle::before {
  content: '';
  display: block;
  width: 4px;
  height: 100%;
  background: blue;
  margin: 0 auto;
}

.MidMainRight {
    flex: 1 1 20em;
    background-color: pink;
    height: calc(100vh - 8em);
}

#UserGuideIframeId, #WelcomeIframeId {
    height:  100%;
    width: 100%;
}

/* The bottom section provides status information */

.BottomSection {
    position: absolute;
    bottom: 1em;
    left: 1em; 
    right: 1em;
    height: 1.5em;
    background-color: orange;
}

#WelcomeHtml {
    width: 100%;
    height: 100%;
}

.HtmlContent {
    width: 100%;
    height: 100%;
}

/* Processor state layout */

#ProcessorState {
    display: grid;
    grid-template-rows:  [ProcStateHlineStart] min-content
			 [ProcStateHlineControlEnd] 1fr
			 [ProcStateHlineDecodeLabel] min-content
			 [ProcStateHlineDecodeStart] min-content
			 [ProcStateHlineInputBufferStart] 2em
			 [ProcStateHlineEnd] ;
    grid-template-columns: [ProcStateVlineStart] min-content
			    [ProcStateVlineInterruptStart] min-content
			    [ProcStateVlineSegStart] min-content
			    [ProcStateVlineRegFileStart] min-content
			    [ProcStateVlineMemStart] min-content
			    [ProcStateVlineIOstart] 1fr
			    [ProcStateVlineEnd] ;
    grid-row-gap: 0.1em;
    grid-column-gap: 0.2em;
    margin: 1em;
    box-sizing: border-box;
    background-color: turquoise;
}

.ProcStateSection {
    border: 1px;
    border-radius: 4px;
    border-style: solid;
    border-color: red;
    padding: 2px;
    margin: 2px;
    background-color: white;
    color: black;
}

#MemSection {
    grid-column-start: ProcStateVlineMemStart;
    grid-column-end: ProcStateVlineIOstart;
    grid-row-start: ProcStateHlineStart;
    grid-row-end: ProcStateHlineEnd;
    background-color: beige;
    display: grid;
    height: auto;
    width: auto;
    color: black;
    grid-template-rows: [MemHlineStart] min-content
					[MemHlineDisplayStart] 1fr
					[MemHlineEnd];
    grid-template-columns: [MemVlineStart] min-content
					   [MemVlineMiddle] min-content
					   [MemvlineEnd];
}

.MemDisplay {
    font-family: 'Lucida Console',monospace;
    font-size: 0.9em;
    overflow-y: scroll;
    overflow-x: visible;
    background-color: ivory;
    height: calc(100vh - 35em);  /* 15em; */
}

.MemSecName {
    grid-column-start: MemVlineStart;
    grid-column-end: MemVlineEnd;
    text-align: center;
    font-family: sans-serif;
    font-size: 0.9em;
    font-weight: bold;
}


#MemDisplay1 {
    grid-row-start: MemHlineDisplayStart;
    grid-row-end: MemHlineEnd;
    grid-column-start: MemVlineStart;
    grid-column-end: MemVlineMiddle;
    width: var(--mem-display-width);
}

#MemDisplay2 {
    grid-row-start: MemHlineDisplayStart;
    grid-row-end: MemHlineEnd;
    grid-column-start: MemVlineMiddle;
    grid-column-end: MemVlineEnd;
    width: var(--mem-display-width);
}

.Registers, .Decode {
    display: grid;
    height: auto;
    width: auto;
    background-color: ivory;
    color: black;
    grid-template-rows: [RegHlineStart] min-content [RegHlineEnd];
    grid-template-columns: [RegVlineStart] min-content
					   [RegVlineRNameEnd]
					   var(--reg-name-val-sep)
					   [RegVlineRValStart] min-content
					   [RegVlineEnd];
}

#InstructionRegisters {
    grid-row-start: ProcStateHlineStart;
    grid-row-end: ProcStateHlineControlEnd;
    grid-column-start: ProcStateVlineStart;
    grid-column-end: ProcStateVlineInterruptStart;
}

#InterruptRegisters {
    grid-row-start: ProcStateHlineStart;
    grid-row-end: ProcStateHlineControlEnd;
    grid-column-start: ProcStateVlineInterruptStart;
    grid-column-end: ProcStateVlineSegStart;
}

#SegmentRegisters {
    grid-row-start: ProcStateHlineStart;
    grid-row-end: ProcStateHlineControlEnd;
    grid-column-start: ProcStateVlineSegStart;
    grid-column-end: ProcStateVlineRegFileStart;
}

#RegisterFile {
    grid-row-start: ProcStateHlineStart;
    grid-row-end: ProcStateHlineEnd;
    grid-column-start: ProcStateVlineRegFileStart;
    grid-column-end: ProcStateVlineMemStart;
}

#InstructionDecode {
    grid-row-start: ProcStateHlineDecodeStart;
    grid-row-end: ProcStateHlineEnd;
    grid-column-start: ProcStateVlineStart;
    grid-column-end: ProcStateVlineSegStart;
}


#Emulator {
    grid-column-start: ProcStateVlineSegStart;
    grid-column-end: ProcStateVlineRegFileStart;
    grid-row-start: ProcStateHlineDecodeStart;
    grid-row-end: ProcStateHlineEnd;
}

.NewRegSecName {
    grid-column-start: RegVlineStart;
    grid-column-end: RegVlineEnd;
    text-align: center;
    font-family: sans-serif;
    font-size: 0.9em;
    font-weight: bold;
}

.RegisterName {
/*    grid-column-start: 1;
    grid-column-end: 2; */
    grid-column-start: RegVlineStart;
    grid-column-end: RegVlineRNameEnd;
}

.RegisterValue {
/*    grid-column-start: 2;
    grid-column-end: 3; */
    grid-column-start: RegVlineRValStart;
    grid-column-end: RegVlineEnd;
}

#IOSection {
    grid-column-start: ProcStateVlineIOStart;
    grid-column-end: ProcStateVlineEnd;
    grid-row-start: ProcStateHlineStart;
    grid-row-end: ProcStateHlineEnd;
    background-color: beige;
    display: grid;
    height: auto;
    width: auto;
    color: black;
    grid-template-rows: [IOHlineStart] 1em
				       [IOHlineLogStart] 4fr
				       [IOHlineInbufStart] 1fr
				       [IOHlineInbufLabelStart] 1em
				       [IOHlineEnd];
    grid-template-columns: [IOVlineStart] 1fr [IOVlineEnd];
}

.IOSecName {
    grid-column-start: IOVlineStart;
    grid-column-end: IOVlineEnd;
    text-align: center;
    font-family: sans-serif;
    font-size: 0.9em;
    font-weight: bold;
}

#IOlog {
    grid-row-start: IOHlineLogStart;
    grid-row-end: IOHlineInbufStart;
    grid-column-start: IOVlineStart;
    grid-column-end:  IOVlineEnd;
    background-color: white;
    border-color: blue;
    border-style: solid;
    margin: 2px;
    color: black;
    width: auto;
}

#IOinputBuffer {
    grid-row-start: IOHlineInbufStart;
    grid-row-end: IOHlineInbufLabelStart;
    grid-column-start: IOVlineStart;
    grid-column-end:  IOVlineEnd;
    background: yellow;
}
#IOInbufLabel {
    grid-row-start: IOHlineInbufLabelStart;
    grid-row-end: IOHlineEnd;
    grid-column-start: IOVlineStart;
    grid-column-end:  IOVlineEnd;
    background: beige;
    text-align: center;
    font-family: sans-serif;
    font-size: 0.9em;
    font-weight: bold;

}

/* Highlighting */

.GET {
    color: blue;
}
.PUT {
    color: red;
}

.ERR {
    font-weight: bold;
    color: red;
}


.ListingHeader {
    font-weight: bold;
    color: blue;
}
