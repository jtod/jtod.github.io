; AsmStatements: test assembly of each statement type
; This file is part of Sigma16, see https://jtod.github.io/home/Sigma16/

; Examples of all the assembly language statements; should assemble
; without any syntax errors.

;-------------------------------------------------------------
; Character set
;-------------------------------------------------------------

; The following characters should be accepted

; abcdefghijklmnopqrstuvwxyz
; ABCDEFGHIJKLMNOPQRSTUVWXYZ
; 0123456789
; `!"$%^&*()-_=+[{]};:'@#~|,<.>/?

; module statement
Stmts  module

;-------------------------------------------------------------
; RRR instructions
;-------------------------------------------------------------

       add      R5,R12,R7      ; 05c7
       sub      R12,R3,R15     ; 1c3f
       mul      R1,R2,R3       ; 2123
x      div      R1,R2,R3       ; 3123  x = 0003 relocatable
       addc     R1,R2,R3       ; 4123
loop   add      R1,R2,R3       ; 0123  loop = 0005 relocatable
       cmp      R1,R2          ; 5012
       push     R7,R8,R10      ; 678a
       pop      R7,R8,R10      ; 778a
       top      R7,R8,R10      ; 878a
       shift    R11,R12,R13    ; 9bcd
       muln     R11,R12,R13    ; abcd
       divn     R11,R12,R13    ; bbcd
       trap     R1,R2,R3       ; d123

;-------------------------------------------------------------
; RX instructions
;-------------------------------------------------------------

       lea      R3,loop[R3]    ; f330 0005
       lea      R12,$b3c2[R4]  ; fc40 b3c2
       lea      R1,23[R2]      ; f120 0017
       lea      R5,-1[R5]      ; f550 ffff
       load     R1,loop[R2]    ; f121 0005
       store    R9,$2b7f[R10]  ; f9a2 2b7f
       jump     loop[R2]       ; f023 0005
       jal      R13,loop[R0]   ; fd04 0005
       jumpc0   11,10[R0]      ; fb05 000a
       jumpc1   5,11[R1]       ; f516 000b
       jumpz    R7,12[R2]      ; f727 000c
       jumpnz   R8,13[R9]      ; f898 000d
       save     R6,2[R14]      ; f6e9 0002
       restore  R6,2[R14]      ; f6ea 0002
       testset  R5,x[R0]       ; f50b 0003

;-------------------------------------------------------------
; EXP instructions
;-------------------------------------------------------------

       resume                  ; e000
       getctl   R2,req         ; e001 2200
       putctl   R4,status      ; e002 4000
       putctl   R4,mask        ; e002 4100
       putctl   R4,req         ; e002 4200
       putctl   R4,istat       ; e002 4300
       putctl   R4,ipc         ; e002 4400
       putctl   R4,vect        ; e002 4500
       putctl   R4,psegBeg     ; e002 4600
       putctl   R4,psegEnd     ; e002 4700
       putctl   R4,dsegBeg     ; e002 4800
       putctl   R4,dsegEnd     ; e002 4900
       shiftl   R5,R3,7        ; e504 3700
       shiftr   R4,R3,8        ; e405 3800
       logicb   R1,R2,R3,6,13  ; e10b 236d
       logicw   R1,R2,R3,6     ; e10a 2360
       extract  R2,R3,5,6      ; e206 3056
       extracti R2,R3,5,6      ; e207 3056
       inject   R2,R3,R4,5,6   ; e208 3456
       injecti  R2,R3,R4,5,6   ; e209 3456

;-------------------------------------------------------------
; Pseudoinstructions
;-------------------------------------------------------------

       jumple   21[R1]         ; jumpc0
       jumpne   22[R3]         ; jumpc0
       jumpge   23[R5]         ; jumpc0
       jumpnv   24[R7]         ; jumpc0
       jumpnvu  25[R9]         ; jumpc0
       jumpnco  27[R11]        ; jumpc0

       jumplt   16[R0]         ; jumpc1
       jumpeq   18[R2]         ;  jumpc1
       jumpgt   20[R4]         ; jumpc1
       jumpv    22[R6]         ; jumpc1
       jumpvu   24[R8]         ; jumpc1
       jumpco   26[R10]        ; jumpc1

       inv      R6,R7          ; logicw
       and      R6,R7,R8       ; logicw
       or       R6,R7,R8       ; logicw
       xor      R6,R7,R8       ; logicw

       invb     R6,R7,15       ; logicb
       andb     R6,R7,R8,15    ; logicb
       orb      R6,R7,R8,15    ; logicb
       xorb     R6,R7,R8,15    ; logicb

       field    R4,7,5         ; injecti

;-------------------------------------------------------------
; Directives
;-------------------------------------------------------------

; org statement
;       org      $00a4
; bbb   add      R1,R2,R3       ; 0123  bbb  = 00a4 relocatable

; block statement
a1     data     1              ; 0001  a    = 00a5 relocatable
arr    block    5              ;       arr  = 00a6
a2     data     2              ; 0002  b    = 00ab relocatable

; equ statement
seven  equ      7              ;       seven = 0007 fixed
loop2  equ      loop           ;       loop = 0005 relocatable

; import statement
foo    import   Mod1,foo
f      import   Mod2,fcn

; export statement
       export   x
       export   seven

;-------------------------------------------------------------
; Data statements
;-------------------------------------------------------------

answer data     42             ; positive integer
       data     60000          ; large natural ea60
       data     -1             ; negative integer
       data     $03f2          ; hex
       data     x              ; relocatable label
bla    data     loop2          ; relocatable equ
       data     seven          ; fixed equ
