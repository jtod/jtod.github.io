; Test assembly language statements

; All of the statements are represented here; there shouldn't be any
; assembly errors.  This is intended for checking that the assembler
; generates correct object code.  There are separate files for testing
; the semantics of the instructions.

; Character set: the following characters should be accepted
; abcdefghijklmnopqrstuvwxyz_
; ABCDEFGHIJKLMNOPQRSTUVWXYZ
; 0123456789
; `!"$%^&*()-_=+[{]};:'@#~|,<.>/?
; ¬ Logical not symbol
; £ Pound symbol

; Characters that might cause html problems
; less than, greater than in comments
     cmplt    R1,R2,R3    ; R1 := R2 < R3
; The following has caused problems in assembly listing:
; R2(LT)R3 where (LT) is < character
     cmplt    R1,R2,R3    ; R1 := R2<R3
     cmpgt    R1,R2,R3    ; R1 := not R2 <= R3
     cmpgt    R1,R2,R3    ; R1 := not R2<=R3
     cmpgt    R1,R2,R3    ; R1 := R2 > R3
     cmpgt    R1,R2,R3    ; R1 := R2>R3

; Directives
main module
foo  import   Mod1
bar  import   Mod1
baz  import   Mod2
fcn  import   Mod2
     export   x
     export   y
     export   sum
     export   goodlabel
     org      $00ff
pqr  equ      5

; RRR
     add      R5,R12,R7
     sub      R12,R3,R15
     mul      R1,R2,R3
     div      R1,R2,R3
     cmp      R1,R2
     cmplt    R1,R2,R3
     cmpeq    R1,R2,R3
     cmpgt    R1,R2,R3
     invold   R1,R2     ; deprecated
     andold   R1,R2,R3  ; deprecated
     orold    R1,R2,R3  ; deprecated
     xorold   R1,R2,R3  ; deprecated
     nop      R1,R2,R3
     trap     R1,R2,R3

; RX
     lea      R3,goodlabel[R3]
     lea      R3,$b3c2[R4]
     lea      R1,23[R2]
     lea      R5,-1[R5]
abcd lea      R5,abcd[R12]
     load     R1,x[R2]  ; ok
loop load     R8,$abcd[R0]
     store    R9,$2b7f[R10]
     jump     loop[R2]
     jumpc0   13,10[R0]
     jumpc1   5,11[R1]
     jumpf    R7,12[R2]
     jumpt    R8,13[R3]
     jal      R13,goodlabel[R0]
     testset  R5,mutex[R0]
mutex data     0

; EXP1
     rfi

; EXP2

       getctl   R2,req
       putctl   R4,status
       putctl   R4,mask
       putctl   R4,req
       putctl   R4,istat
       putctl   R4,ipc
       putctl   R4,vect
       putctl   R4,psegBeg
       putctl   R4,psegEnd
       putctl   R4,dsegBeg
       putctl   R4,dsegEnd

     save     R2,R7,3[R14]
     restore  R2,R7,3[R14]
     getctl   R3,req
     putctl   R3,req
     execute  R8,R9
     push     R1,R11,R12
     pop      R1,R11,R10
     top      R1,R11,R10
     shiftl   R5,R3,7
     shiftr   R5,R3,8
       shiftl   R5,R2,7
       shiftr   R1,R12,13
     extract  R2,R3,5,6
       extract  R2,R13,4,7   
     extracti R2,R3,5,6
     inject   R2,R3,5,6
     injecti  R2,R3,5,6
     logicw   R1,R2,R3,6
     logicb   R1,R2,R3,6,13
;       dispatch R8,13

; Pseudoinstructions
     jumple   17[R1]       ; jumpc0
     jumpne   19[R3]       ; jumpc0
     jumpge   21[R5]       ; jumpc0
     jumpnv   23[R7]       ; jumpc0
     jumpnvu  25[R9]       ; jumpc0
     jumpnco  27[R11]      ; jumpc0

     jumplt   16[R0]       ; jumpc1
     jumpeq   18[R2]       ; jumpc1
     jumpgt   20[R4]       ; jumpc1
     jumpv    22[R6]       ; jumpc1
     jumpvu   24[R8]       ; jumpc1
     jumpco   26[R10]      ; jumpc1

     invnew   R6,R7        ; logicw
     andnew   R6,R7,R8     ; logicw
     ornew    R6,R7,R8     ; logicw
     xornew   R6,R7,R8     ; logicw

def  invb     R6,R7,15     ; logicb
     andb     R6,R7,R8,15  ; logicb
     orb      R6,R7,R8,15  ; logicb
     xorb     R6,R7,R8,15  ; logicb

     field    R4,7,5       ; injecti

goodlabel

; data

ab       data    3      ; positive integer
x        data    389    ; larger integer
         data    -5     ; negative integer
sum      data    $03f2  ; hex
y        data   $01a3   ; hex
v1       data   -23     ; negative integer
frame    data   0
abc    data     42
       data     -3
       data     $2ca3
       data     def
