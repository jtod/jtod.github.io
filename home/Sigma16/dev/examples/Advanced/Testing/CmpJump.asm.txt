; CmpJump.asm.txt
; Test comparisons, jumps, conditional jumps, condition codes

    lea     R2,3[R0]
    lea     R3,5[R0]
    cmp     R3,R2
    jumpge  jumped[R0]
nojump
    add     R1,R2,R3
jumped
    add     R0,R0,R0

    load    R1,veryneg[R0]        ; << 0
    load    R2,slightlyneg[R0]    ; < 0
    lea     R3,13[R0]             ; > 0
    lea     R4,28749[R0]          ; >> 0

    cmplt   R9,R1,R2              ; 1
    cmplt   R9,R2,R0              ; 1
    cmplt   R9,R0,R3              ; 1
    cmplt   R9,R3,R4              ; 1
    cmplt   R9,R1,R4              ; 1

    cmplt   R9,R1,R1              ; 0
    cmplt   R9,R4,R4              ; 0
    
    cmplt   R9,R2,R1              ; 0
    cmplt   R9,R0,R2              ; 0
    cmplt   R9,R3,R0              ; 0
    cmplt   R9,R4,R3              ; 0
    cmplt   R9,R4,R1              ; 0



    load    R1,veryneg[R0]        ; << 0
    load    R2,slightlyneg[R0]    ; < 0
    lea     R3,13[R0]             ; > 0
    lea     R4,28749[R0]          ; >> 0

    cmplt   R9,R1,R2              ; 1
    cmplt   R9,R2,R0              ; 1
    cmplt   R9,R0,R3              ; 1
    cmplt   R9,R3,R4              ; 1
    cmplt   R9,R1,R4              ; 1

    cmplt   R9,R1,R1              ; 0
    cmplt   R9,R4,R4              ; 0
    
    cmplt   R9,R2,R1              ; 0
    cmplt   R9,R0,R2              ; 0
    cmplt   R9,R3,R0              ; 0
    cmplt   R9,R4,R3              ; 0
    cmplt   R9,R4,R1              ; 0



    load    R1,veryneg[R0]        ; << 0
    load    R2,slightlyneg[R0]    ; < 0
    lea     R3,13[R0]             ; > 0
    lea     R4,28749[R0]          ; >> 0

    cmplt   R9,R1,R2              ; 1
    cmplt   R9,R2,R0              ; 1
    cmplt   R9,R0,R3              ; 1
    cmplt   R9,R3,R4              ; 1
    cmplt   R9,R1,R4              ; 1

    cmplt   R9,R1,R1              ; 0
    cmplt   R9,R4,R4              ; 0
    
    cmplt   R9,R2,R1              ; 0
    cmplt   R9,R0,R2              ; 0
    cmplt   R9,R3,R0              ; 0
    cmplt   R9,R4,R3              ; 0
    cmplt   R9,R4,R1              ; 0


; Test cmplt, cmpeq, cmpgt,jumpf, jumpt

    lea    R1,24[R0]
    lea    R2,31[R0]
    cmplt  R4,R1,R2
    cmpeq  R5,R1,R2
    cmpgt  R6,R1,R2
    jumpt  R4,t1[R0]
    lea    R14,$ffff[R0]
    jump   done[R0]
t1  jumpf  R4,t2[R0]
    jump   done[R0]
t2  lea    R14,$eeee[R0]


; change
    lea    R1,-1[R0]
    lea    R2,3[R0]
    lea    R3,7[R0]
    lea    R8,1[R0]    ; increment
    add    R9,R0,R0    ; error count
;                                             flags  cc bits  cc hex
    cmp    R1,R2      ; < signed, > unsigned   (lG)    3,0     0008
    cmp    R2,R1      ; > signed, < unsigned   (Lg)    4,1     0012

    cmp    R2,R3      ; < signed, < unsigned   (Ll)    4,3     0018
    cmp    R3,R2      ; > signed, > unsigned   (gG)    1,0     0003

    cmp    R1,R2      ; < signed, > unsigned   (lG)    3,0     0008
    jumplt lt[R0]
    add    R9,R9,R8   ; increment error count
lt                    ; ok to jump here

    store  R9,errs[R0]  ; save count of errors
done
    trap   R0,R0,R0     ; terminate

errs data  0
