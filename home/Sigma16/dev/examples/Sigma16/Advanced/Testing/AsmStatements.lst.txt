Line Addr Code Code Source
   1 0000           ; Sigma16 AsmStatements.asm.txt: test translation of assembly language statements
   2 0000           ; Copyright 2020 John T. O'Donnell.  Licence GPL3, see Sigma16/README.md
   3 0000           
   4 0000           ; Examples of all the assembly language statements, to test
   5 0000           ; translation to machine language.  Should assemble without syntax
   6 0000           ; errors.
   7 0000           
   8 0000           ; Character set: the following characters should be accepted
   9 0000           
  10 0000           ; abcdefghijklmnopqrstuvwxyz_
  11 0000           ; ABCDEFGHIJKLMNOPQRSTUVWXYZ
  12 0000           ; 0123456789
  13 0000           ; `!"$%^&*()-_=+[{]};:'@#~|,&lt;.>/?
  14 0000           
  15 0000           ;-------------------------------------------------------------------------------
  16 0000           ; Directives
  17 0000           ;-------------------------------------------------------------------------------
  18 0000           
  19 0000           ; module statement
  20 0000           Stmts  module
  21 0000           
  22 0000           ; org statement
  23 0000 1123             sub      R1,R2,R3        ; 1123
  24 0001 0789             add      R7,R8,R9        ; 0789
  25 0002 2456      x      mul      R4,R5,R6        ; 2456    x    = 0002 relocatable
  26 0003 3abc      loop   div      R10,R11,R12     ; 3abc    loop = 0003 relocatable
  27 0004           ;       org      $00ff
  28 0004           
  29 0004           ; equ statement
  30 0004           pqr    equ      5               ;         pqr = 0005 fixed
  31 0004           wxy    equ      loop            ;         wxy = 0003 relocatable
  32 0004           
  33 0004           ; import statement
  34 0004           foo    import   Mod1,foo
  35 0004           bbb    import   Mod1,bar
  36 0004           baz    import   Mod2,baz
  37 0004           f      import   Mod2,fcn
  38 0004           
  39 0004           ; export statement
  40 0004                  export   loop
  41 0004                  export   pqr
  42 0004           
  43 0004           ;-------------------------------------------------------------------------------
  44 0004           ; RRR instructions
  45 0004           ;-------------------------------------------------------------------------------
  46 0004           
  47 0004 05c7             add      R5,R12,R7       ; 05c7
  48 0005 1c3f             sub      R12,R3,R15      ; 1c3f
  49 0006 2123             mul      R1,R2,R3        ; 2123
  50 0007 3123             div      R1,R2,R3        ; 3123
  51 0008 4123             addc     R1,R2,R3        ; 4123
  52 0009 5012             cmp      R1,R2           ; 5012
  53 000a d123             trap     R1,R2,R3        ; d123
  54 000b           
  55 000b           ;-------------------------------------------------------------------------------
  56 000b           ; RX instructions
  57 000b           ;-------------------------------------------------------------------------------
  58 000b           
  59 000b f330 0003        lea      R3,loop[R3]     ; f330 0003
  60 000d fc40 b3c2        lea      R12,$b3c2[R4]   ; fc40 b3c2
  61 000f f120 0017        lea      R1,23[R2]       ; f120 0017
  62 0011 f550 ffff        lea      R5,-1[R5]       ; f550 ffff
  63 0013 f121 0003        load     R1,loop[R2]     ; f121 0003
  64 0015 f9a2 2b7f        store    R9,$2b7f[R10]   ; f9a2 2b7f
  65 0017 f023 0003        jump     loop[R2]        ; f023 0003
  66 0019 fd04 0003        jal      R13,loop[R0]    ; fd04 0003
  67 001b fb05 000a        jumpc0   11,10[R0]       ; fb05 000a
  68 001d f516 000b        jumpc1   5,11[R1]        ; f516 000b
  69 001f f727 000c        jumpz    R7,12[R2]       ; f727 000c
  70 0021 f898 000d        jumpnz   R8,13[R9]       ; f898 000d
  71 0023 f509 0002        testset  R5,x[R0]        ; f509 0002
  72 0025           
  73 0025           ;-------------------------------------------------------------------------------
  74 0025           ; EXP instructions
  75 0025           ;-------------------------------------------------------------------------------
  76 0025           
  77 0025 e000             resume                   ; e000
  78 0026 e001 2200        getctl   R2,req          ; e201 0000
  79 0028 e002 4000        putctl   R4,status
  80 002a e002 4100        putctl   R4,mask
  81 002c e002 4200        putctl   R4,req
  82 002e e002 4300        putctl   R4,istat
  83 0030 e002 4400        putctl   R4,ipc
  84 0032 e002 4500        putctl   R4,vect
  85 0034 e002 4600        putctl   R4,psegBeg
  86 0036 e002 4700        putctl   R4,psegEnd
  87 0038 e002 4800        putctl   R4,dsegBeg
  88 003a e002 4900        putctl   R4,dsegEnd
  89 003c 0000 0000        shiftl   R5,R3,7
  90 003e 0000 0000        shiftr   R5,R3,8
  91 0040 e117 236d        logicb   R1,R2,R3,6,13
  92 0042 0000 0000        logicw   R1,R2,R3,6
  93 0044 e212 3056        extract  R2,R3,5,6
  94 0046 e213 3056        extracti R2,R3,5,6
  95 0048 e214 3456        inject   R2,R3,R4,5,6
  96 004a e215 3456        injecti  R2,R3,R4,5,6
  97 004c 0000 0000        push     R1,R11,R12
  98 004e 0000 0000        pop      R1,R11,R10
  99 0050 0000 0000        top      R1,R11,R10
 100 0052 ee08 2703        save     R2,R7,3[R14]
 101 0054 ee09 2703        restore  R2,R7,3[R14]
 102 0056 e80c 9000        execute  R8,R9
 103 0058                  dispatch R8,13
 104 0058           
 105 0058           ;-------------------------------------------------------------------------------
 106 0058           ; Pseudoinstructions
 107 0058           ;-------------------------------------------------------------------------------
 108 0058           
 109 0058 f014 0015        jumple   21[R1]       ; jumpc0
 110 005a f034 0016        jumpne   22[R3]       ; jumpc0
 111 005c f054 0017        jumpge   23[R5]       ; jumpc0
 112 005e f074 0018        jumpnv   24[R7]       ; jumpc0
 113 0060 f094 0019        jumpnvu  25[R9]       ; jumpc0
 114 0062 f0b4 001b        jumpnco  27[R11]      ; jumpc0
 115 0064           
 116 0064 f005 0010        jumplt   16[R0]       ; jumpc1
 117 0066 f025 0012        jumpeq   18[R2]       ; jumpc1
 118 0068 f045 0014        jumpgt   20[R4]       ; jumpc1
 119 006a f065 0016        jumpv    22[R6]       ; jumpc1
 120 006c f085 0018        jumpvu   24[R8]       ; jumpc1
 121 006e f0a5 001a        jumpco   26[R10]      ; jumpc1
 122 0070           
 123 0070 e616 70c0        inv      R6,R7        ; logicw
 124 0072 0000 0000        and      R6,R7,R8     ; logicw
 125 0074 0000 0000        or       R6,R7,R8     ; logicw
 126 0076 0000 0000        xor      R6,R7,R8     ; logicw
 127 0078           
 128 0078 0000 0000        invb     R6,R7,15     ; logicb
 129 007a 0000 0000        andb     R6,R7,R8,15  ; logicb
 130 007c 0000 0000        orb      R6,R7,R8,15  ; logicb
 131 007e 0000 0000        xorb     R6,R7,R8,15  ; logicb
 132 0080           
 133 0080 0000 0000        field    R4,7,5       ; injecti
 134 0082           
 135 0082           ;-------------------------------------------------------------------------------
 136 0082           ; Data statements
 137 0082           ;-------------------------------------------------------------------------------
 138 0082           
 139 0082 0009      ab     data     9       ; positive integer
 140 0083 002a      abc    data     42
 141 0084 0185             data     389     ; larger integer
 142 0085 fffb             data     -5      ; negative integer
 143 0086 ffe9      v1     data     -23     ; negative integer
 144 0087           
 145 0087 03f2      sum    data     $03f2   ; hex
 146 0088 01a3      y      data     $01a3   ; hex
 147 0089           
 148 0089 0003      bla    data     loop    ; relocatable
 149 008a 0087             data     sum     ; relocatable
 150 008b           

Symbol table
Name      Val      Def   Used
Stmts     0000 R   20  
ab        0082 R  139  
abc       0083 R  140  
baz       0000 F   36  
bbb       0000 F   35  
bla       0089 R  148  
f         0000 F   37  
foo       0000 F   34  
loop      0003 R   26  31,59,63,65,66,148
pqr       0005 F   30  
sum       0087 R  145  149
v1        0086 R  143  
wxy       0003 R   31  
x         0002 R   25  71
y         0088 R  146  